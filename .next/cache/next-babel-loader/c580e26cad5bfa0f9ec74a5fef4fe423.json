{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/tylerklepsch/sites/tylerklepsch--wip/tylerklepsch-old/components/ContactForm/ContactForm.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Input from '../UI/Input/Input';\nimport SubmitButton from '../UI/SubmitButton/SubmitButton';\nimport classes from './ContactForm.module.css';\n/*\n  TO DO: After pushing to netlify, connect and confirm netlify will send submitted message.\n*/\n\nvar encode = function encode(data) {\n  return Object.keys(data).map(function (key) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]);\n  }).join(\"&\");\n};\n\nvar ContactForm = /*#__PURE__*/function (_Component) {\n  _inherits(ContactForm, _Component);\n\n  var _super = _createSuper(ContactForm);\n\n  function ContactForm() {\n    var _this;\n\n    _classCallCheck(this, ContactForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      contactInfo: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            label: 'Name',\n            placeholder: 'Jonathon Joestar'\n          },\n          value: '',\n          validation: {\n            required: false\n          },\n          valid: true,\n          touched: false\n        },\n        subject: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            label: 'Subject',\n            placeholder: 'Who is your favourite Joestar?'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        comment: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'textarea',\n            label: 'Comment',\n            placeholder: 'There is no wrong answer, but...'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitHandler\", function (e) {\n      fetch(\"/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: encode(_objectSpread({\n          \"form-name\": \"contact-t\"\n        }, _this.state))\n      }).then(function () {\n        return alert(\"Success!\");\n      })[\"catch\"](function (error) {\n        return alert(error);\n      });\n      e.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"inputChangedHandler\", function (event, inputIdentifier) {\n      // Copy of current form data top level.\n      var formData = _objectSpread({}, _this.state.contactInfo); // We can copy the object properties here: \n\n\n      var updatedFormElement = _objectSpread({}, formData[inputIdentifier]); // Now we can set the state value to the event.target.value (aka, user typing in the element).\n\n\n      updatedFormElement.value = event.target.value; // Will update to true or false.\n\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true; // Set the form element (key) to update the matched state.\n\n      formData[inputIdentifier] = updatedFormElement; // Validate the whole form.\n      // Initially set to true, so we don't have the problem of last item having to be true to pass.\n\n      var formIsValid = true;\n\n      for (var _inputIdentifier in formData) {\n        // This will set formIsValid to true of any items match and if formIsValid is true. False overrides true.\n        formIsValid = formData[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        contactInfo: formData,\n        formIsValid: formIsValid\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ContactForm, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true; // If no rules are defined, automatically return true.\n\n      if (!rules) {\n        return true;\n      } // add all rules below.\n      // Check if element is required.\n\n\n      if (rules.required) {\n        // isValid is only true if the trimmed value is not empty.\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.contactInfo) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.contactInfo[key]\n        });\n      }\n      /* Create a new array of input elements by mapping our contactForm state array. */\n\n\n      var form = __jsx(\"form\", {\n        name: \"contact-t\",\n        method: \"post\",\n        className: classes.Form,\n        netlify: true,\n        \"netlify-honeypot\": \"bot-field\",\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, __jsx(\"input\", {\n        type: \"hidden\",\n        name: \"form-name\",\n        value: \"contact-t\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      }), formElementsArray.map(function (formElement) {\n        return __jsx(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }\n        });\n      }), __jsx(\"div\", {\n        className: classes.form__submit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      }, __jsx(SubmitButton, {\n        btnType: \"form-submit\",\n        clicked: this.submitHandler,\n        disabled: !this.state.formIsValid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }\n      }, \"Submit\")));\n\n      return __jsx(\"div\", {\n        className: classes.FormContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }\n      }, form);\n    }\n  }]);\n\n  return ContactForm;\n}(Component);\n\nexport default ContactForm;","map":{"version":3,"sources":["/home/tylerklepsch/sites/tylerklepsch--wip/tylerklepsch-old/components/ContactForm/ContactForm.js"],"names":["React","Component","Input","SubmitButton","classes","encode","data","Object","keys","map","key","encodeURIComponent","join","ContactForm","contactInfo","name","elementType","elementConfig","type","label","placeholder","value","validation","required","valid","touched","subject","comment","formIsValid","e","fetch","method","headers","body","state","then","alert","error","preventDefault","event","inputIdentifier","formData","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","formElementsArray","push","id","config","form","Form","handleSubmit","formElement","inputChangedHandler","form__submit","submitHandler","FormContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Input from '../UI/Input/Input';\nimport SubmitButton from '../UI/SubmitButton/SubmitButton';\nimport classes from './ContactForm.module.css';\n\n\n/*\n  TO DO: After pushing to netlify, connect and confirm netlify will send submitted message.\n*/\nconst encode = (data) => {\n  return Object.keys(data)\n      .map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n      .join(\"&\");\n}\n\nclass ContactForm extends Component {\n  state = {\n    contactInfo: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          label: 'Name',\n          placeholder: 'Jonathon Joestar',\n        },\n        value: '',\n        validation: {\n          required: false\n        },\n        valid: true,\n        touched: false\n      },\n      subject: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          label: 'Subject',\n          placeholder: 'Who is your favourite Joestar?',\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      comment: {\n        elementType: 'textarea',\n        elementConfig: {\n          type: 'textarea',\n          label: 'Comment',\n          placeholder: 'There is no wrong answer, but...',\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n    },\n    formIsValid: false\n  }\n\n  checkValidity (value, rules) {\n    let isValid = true;\n\n    // If no rules are defined, automatically return true.\n    if (!rules) {\n      return true;\n    }\n\n    // add all rules below.\n\n    // Check if element is required.\n    if (rules.required) {\n      // isValid is only true if the trimmed value is not empty.\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    return isValid;\n  }\n\n  submitHandler = (e) => {\n    fetch(\"/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: encode({ \"form-name\": \"contact-t\", ...this.state })\n    })\n      .then(() => alert(\"Success!\"))\n      .catch(error => alert(error));\n\n    e.preventDefault();\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    // Copy of current form data top level.\n    const formData = {\n      ...this.state.contactInfo\n    }\n\n    // We can copy the object properties here: \n    const updatedFormElement = {\n      ...formData[inputIdentifier]\n    }\n\n    // Now we can set the state value to the event.target.value (aka, user typing in the element).\n    updatedFormElement.value = event.target.value;\n\n    // Will update to true or false.\n    updatedFormElement.valid = this.checkValidity( updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n\n    // Set the form element (key) to update the matched state.\n    formData[inputIdentifier] = updatedFormElement;\n\n    // Validate the whole form.\n    // Initially set to true, so we don't have the problem of last item having to be true to pass.\n    let formIsValid = true;\n\n    for (let inputIdentifier in formData) {\n      // This will set formIsValid to true of any items match and if formIsValid is true. False overrides true.\n      formIsValid = formData[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({contactInfo: formData, formIsValid: formIsValid});\n  }\n\n\n  render () {\n    const formElementsArray = [];\n\n    for (let key in this.state.contactInfo) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.contactInfo[key],\n      });\n    }\n\n    /* Create a new array of input elements by mapping our contactForm state array. */\n    let form = (\n      <form \n        name=\"contact-t\"\n        method=\"post\" \n        className={classes.Form}\n        netlify \n        netlify-honeypot=\"bot-field\"\n        onSubmit={this.handleSubmit}>\n        <input type=\"hidden\" name=\"form-name\" value=\"contact-t\" />\n        {formElementsArray.map(formElement => (\n          <Input \n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n        ))}\n        <div className={classes.form__submit}>\n          <SubmitButton \n            btnType=\"form-submit\" \n            clicked={this.submitHandler}\n            disabled={!this.state.formIsValid}>Submit</SubmitButton>          \n        </div>\n\n      </form>\n    );\n\n    return (\n      <div className={classes.FormContainer}>\n        {form}\n      </div>\n    )\n  }\n}\n\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}